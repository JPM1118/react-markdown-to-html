{"version":3,"sources":["components/Header.js","components/Editor.js","configs/markedConfig.js","configs/sanitizeConfig.js","components/Previewer.js","components/Placeholder.js","App.js","serviceWorker.js","index.js","icons/arrow-down2.svg"],"names":["Header","react_default","a","createElement","className","src","icon","alt","Editor","props","placeholder","value","onChange","type","configuredMarked","string","marked","setOptions","breaks","sanitizeHtml","html","sanitize","allowedTags","defaults","concat","allowedAttributes","img","test","replace","Previewer","style","padding","dangerouslySetInnerHTML","__html","markdown","Placeholder","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","event","setState","target","components_Editor","components_Previewer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"uPAGe,SAASA,IACtB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACX,IADH,QAEOH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMC,IAAI,eAF3B,MAGEN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAhB,aAHF,gBCJN,IAgBeI,EAhBA,SAAAC,GACb,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,YACEC,UAAU,iBACVM,YAAaD,EAAME,MACnBC,SAAUH,EAAMG,SAChBC,KAAK,6BCFAC,EARQ,SAAAC,GAKrB,OAJAC,IAAOC,WAAW,CAChBC,QAAQ,IAGHF,IAAOD,qBCQDI,EAZM,SAAAC,GACnB,IAAIL,EAASM,IAASD,EAAM,CAC1BE,YAAaD,IAASE,SAASD,YAAYE,OAAO,CAAC,KAAM,KAAM,QAC/DC,kBAAmB,CACjBvB,EAAG,CAAC,OAAQ,OAAQ,UACpBwB,IAAK,CAAC,MAAO,UAIjB,OADAX,EAAS,QAAQY,KAAKZ,GAAUA,EAAOa,QAAQ,QAAS,KAAOb,GCSlDc,EAfG,SAAApB,GAChB,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,cACAH,EAAAC,EAAAC,cAAA,OACE2B,MAAO,CAAEC,QAAS,YAClB3B,UAAU,YACV4B,wBAAyB,CACvBC,OAAQnB,EAAiBK,EAAaV,EAAMyB,gBCIvCC,EAhBK,WAClB,wYC+BaC,cAzBb,SAAAA,EAAY3B,GAAO,IAAA4B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM/B,KACDmC,MAAQ,CACXV,SAAUC,KAEZE,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KALHA,4EAONW,GACXR,KAAKS,SAAS,CACZf,SAAUc,EAAME,OAAOvC,yCAIzB,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACgD,EAAD,CAAQxC,MAAO6B,KAAKI,MAAMV,SAAUtB,SAAU4B,KAAKK,eACnD5C,EAAAC,EAAAC,cAACiD,EAAD,CAAWlB,SAAUM,KAAKI,MAAMV,oBAnBxBmB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,sDE/HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.8f6afe1e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport icon from \"./../icons/arrow-down2.svg\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header__title\">\r\n        {\" \"}\r\n        Mark <img src={icon} alt=\"arrow down\" /> to\r\n        <span className=\"header__title-span\"> &lt; HTML &gt;</span> Previewer.\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst Editor = props => {\r\n  return (\r\n    <div className=\"box--top-margin box\">\r\n      <div className=\"box__header\">Editor.</div>\r\n      <div className=\"box__body\">\r\n        <textarea\r\n          className=\"box__text-area\"\r\n          placeholder={props.value}\r\n          onChange={props.onChange}\r\n          type=\"text\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import marked from \"marked\";\r\nlet configuredMarked = string => {\r\n  marked.setOptions({\r\n    breaks: true\r\n  });\r\n\r\n  return marked(string);\r\n};\r\n\r\nexport default configuredMarked;\r\n","import sanitize from \"sanitize-html\";\r\n\r\nconst sanitizeHtml = html => {\r\n  let string = sanitize(html, {\r\n    allowedTags: sanitize.defaults.allowedTags.concat([\"h1\", \"h2\", \"img\"]),\r\n    allowedAttributes: {\r\n      a: [\"href\", \"name\", \"target\"],\r\n      img: [\"src\", \"alt\"]\r\n    }\r\n  });\r\n  string = /&gt;/g.test(string) ? string.replace(/&gt;/g, \">\") : string;\r\n  return string;\r\n};\r\n\r\nexport default sanitizeHtml;\r\n","import React from \"react\";\r\nimport configuredMarked from \"../configs/markedConfig\";\r\nimport sanitizeHtml from \"../configs/sanitizeConfig\";\r\n\r\nconst Previewer = props => {\r\n  return (\r\n    <div className=\"previewer box\">\r\n      <div className=\"box__header\">Previewer.</div>\r\n      <div\r\n        style={{ padding: \"0px 10px\" }}\r\n        className=\"box__body\"\r\n        dangerouslySetInnerHTML={{\r\n          __html: configuredMarked(sanitizeHtml(props.markdown))\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Previewer;\r\n","const Placeholder = () => {\r\n  return `\r\n  # Welcome to Markdown!\r\n  ---\r\n  ## Instructions\r\n\r\n  - Open this [link](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) in another tab to learn about Markdown.\r\n  - Enter what you have learned in the 'Editor' window.\r\n  - See how the Markdown entered in the 'Editor' window converts to rendered HTML in the 'Previewer' window.\r\n  - Enjoy!\r\n\r\n  ---------\r\n\r\n  `;\r\n};\r\n\r\nexport default Placeholder;\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Editor from \"./components/Editor\";\nimport Previewer from \"./components/Previewer\";\nimport Placeholder from \"./components/Placeholder\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: Placeholder()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      markdown: event.target.value\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"flex-container\">\n          <Editor value={this.state.markdown} onChange={this.handleChange} />\n          <Previewer markdown={this.state.markdown} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/arrow-down2.de4fe0be.svg\";"],"sourceRoot":""}